:ruby
  Item = Data.define(:value) do
    def id = object_id
    def to_s = value.to_s
  end

  INITIAL_ITEMS = %w[0 1 2 3 4 5 6 7 8 9].map { Item[_1] }.freeze

:ruby
  input = signal("")
  items = signal(INITIAL_ITEMS)

  oninput = ->(target:, **) do
    input.value = target[:value].to_s.strip
  end

  prepend = -> do
    break if input.value.empty?
    items.value = [Item[input.value], *items.value]
    input.value = ""
  end

  append = -> do
    break if input.value.empty?
    items.value = [*items.value, Item[input.value]]
    input.value = ""
  end

  sort = -> { items.value = items.value.sort_by(&:value) }
  shuffle = -> { items.value = items.value.shuffle }
  reverse = -> { items.value = items.value.reverse }
  clear = -> { items.value = [] }

%article
  %p This page exists to demonstrate reordering.
  .flex
    %fieldset
      %legend Add
      .buttons
        %input(type="text" oninput=oninput autocomplete="off" value=input)
        %button(onclick=prepend) Prepend
        %button(onclick=append) Append
    %fieldset
      %legend Actions
      .buttons
        %button(onclick=sort) Sort
        %button(onclick=reverse) Reverse
        %button(onclick=shuffle) Shuffle
        %button(onclick=clear) Clear
  .flex
    .list
      = computed do
        %ul
          = items.value.map do |item|
            %li[item.id]= item
    %div
      %p The order in the list should match this order:
      = computed do
        %pre= items.value.map(&:inspect).join("\n")

:css
  .flex {
    display: flex;
    flex-wrap: wrap;
    gap: 1em;
  }

  .buttons {
    display: flex;
    gap: 1em;
  }

  .list {
    min-width: 5em;
  }

  fieldset {
    flex: 1 1;
  }
