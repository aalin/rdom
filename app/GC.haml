:ruby
  Sample = Data.define(:time, :data)
  Details = import("./Details.haml")

  def initialize(**)
    @b = {}
    @o = {}
    @i = []
  end

  def mount
    loop do
      GC.stat(@b)
      ObjectSpace.count_objects(@o)
      @i.push(count_internals)
      @i.shift while @i.size > 10
      rerender!
      sleep 1
    end
  end

  INTERNALS = [
    S::Root, S::Signal, S::Computed, S::Effect,
    VDOM::Component::Base, VDOM::Nodes::Base,
    VDOM::Nodes::VProps::VCallback::Handler,
    Async::Task,
  ]

  def count_internals(h = {})
    sample = Sample.new(Time.now, h)
    INTERNALS.each do |klass|
      h[klass.name] = ObjectSpace.each_object(klass).count
    end
    sample
  end

  def build_table(data)
    header = Set.new(["Time"])

    rows = data.map do |sample|
      [
        sample.time.strftime("%T"),
        sample.data
          .except("Async::Task", "VDOM::Nodes::Base")
          .sort_by { |k, v| header.add(k).find_index(k) }
          .map(&:last)
      ].flatten
    end

    [header.to_a, *rows]
  rescue => e
    Console.logger.error(self, e)
  end

%div
  %button{onclick: ->{ GC.start }} Run GC
  %dl
    = @b.map do |k, v|
      .entry[k]
        %dt= k
        %dd= v
  %dl
    = @o.map do |k, v|
      .entry[k]
        %dt= k
        %dd= v
  = if sample = @i.last
    %pre= sample.inspect
    %dl
      = sample.data.map do |k, v|
        .entry[k]
          %dt= k
          %dd= v
  %Details
    %span#summary D2 graph
    %div
      %p
        Paste this on&nbsp;
        %a(href="https://play.d2lang.com/" target="_blank")< https://play.d2lang.com
      %pre(tabindex="0")
        = S::Exporter.export(S::Exporter::Formats::D2)
  %Details
    %span#summary Mermaid graph
    %div
      %p
        Paste this on&nbsp;
        %a(href="https://mermaid.live/" target="_blank")< https://mermaid.live/
      %pre(tabindex="0")
        = S::Exporter.export(S::Exporter::Formats::Mermaid)
  %Details
    %span#summary Charts
    %google-chart(type="line"){
      data: JSON.generate(build_table(@i)),
      options: JSON.generate(
        hAxis: { title: "Time" },
        vAxis: { title: "Count" },
        legend: { position: "bottom" },
        crosshair: {
          color: "#000",
          trigger: "selection"
        },
        axes: {
          x: { 0 => { side: "bottom" } }
        }
      )
    }

:css
  pre {
    border: 1px solid #0003;
    border-radius: 2px;
    line-height: 1.5em;
    font-size: 1.2em;
    padding: 1em;
    background: #0003;
    user-select: all;
    white-space: pre-wrap;
  }

  pre:focus {
    background: #00f3;
    outline: 1px dashed #00f;
    border-color: #00f3;
  }

  dl {
    columns: 16em auto;
    font-family: monospace;
  }

  .entry {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
  }

  dt {
    font-weight: bold;
  }
  dd {
    text-align: right;
  }

  google-chart {
    width: 100%;
    aspect-ratio: 0.75;
  }
